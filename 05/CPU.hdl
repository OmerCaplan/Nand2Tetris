// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // checking if it is A/C instruction
    Not(in = instruction[15], out = AInstruction);
    Mux16(a = ALUout, b = instruction, sel = AInstruction, out = ARegIn);

    // setting the ARegister and its load pin, according to wether its A instruction or if the dest A bit is on in C instruction
    Or(a = AInstruction, b = instruction[5], out = ALoad);
    ARegister(in = ARegIn, load = ALoad, out = ARegOut, out[0..14] = addressM);

    // checking if we need to "send" A or M to the ALU
    And(a = instruction[15], b = instruction[12], out = CInstructionAndABit);
    Mux16(a = ARegOut, b = inM, sel = CInstructionAndABit, out = ALUinY);

    // ALU
    ALU(x = ALUinX, y = ALUinY, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8],
         f = instruction[7], no = instruction[6], out = ALUout, out = outM, zr = ALUzr, ng = ALUng);
    
    // determining DRegister load pin - if its C indtruction and the dest D bit is on
    And(a = instruction[15], b = instruction[4], out = CInstructionAndDLoad);
    DRegister(in = ALUout, load = CInstructionAndDLoad, out = ALUinX);
    
    // writeM only if its C instruction and if the dest M bit is on
    And(a = instruction[15], b = instruction[3], out = writeM);
    
    // parsing the ALU output - if its 0, negative or positive
    Not(in = ALUzr, out = noZr);
    Not(in = ALUng, out = noNg);
    And(a = noZr, b = noNg, out = GT);
    And(a = noZr, b = ALUng, out = LT);

    // jump only if ((right jump bit is on and ALUout > 0) or (middle jump bit is on and ALUout = 0) or (left jump bit is on and ALUout < 0)) AND its a C instruction
    And(a = GT, b = instruction[0], out = jump1);
    And(a = LT, b = instruction[2], out = jump2);
    And(a = ALUzr, b = instruction[1], out = jump3);
    Or(a = jump1, b = jump2, out = jump12);
    Or(a = jump12, b = jump3, out = jump);
    And(a = jump, b = instruction[15], out = pcLoad);

    // no jump if pcLoad = false
    Not(in = pcLoad, out = pcInc);

    PC(in = ARegOut, load = pcLoad, inc = pcInc, reset = reset, out[0..14] = pc);
}